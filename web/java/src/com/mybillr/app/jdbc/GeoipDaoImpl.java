/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mybillr.app.jdbc;

import com.mybillr.app.dao.*;
import com.mybillr.app.factory.*;
import com.mybillr.app.dto.*;
import com.mybillr.app.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class GeoipDaoImpl extends AbstractDAO implements GeoipDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT start, end, start_int, end_int, country_symbol, country FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( start, end, start_int, end_int, country_symbol, country ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * Index of column start
	 */
	protected static final int COLUMN_START = 1;

	/** 
	 * Index of column end
	 */
	protected static final int COLUMN_END = 2;

	/** 
	 * Index of column start_int
	 */
	protected static final int COLUMN_START_INT = 3;

	/** 
	 * Index of column end_int
	 */
	protected static final int COLUMN_END_INT = 4;

	/** 
	 * Index of column country_symbol
	 */
	protected static final int COLUMN_COUNTRY_SYMBOL = 5;

	/** 
	 * Index of column country
	 */
	protected static final int COLUMN_COUNTRY = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Inserts a new row in the geoip table.
	 */
	public void insert(Geoip dto) throws GeoipDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isStartModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "start" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEndModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "end" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isStartIntModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "start_int" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEndIntModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "end_int" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCountrySymbolModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "country_symbol" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCountryModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "country" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isStartModified()) {
				stmt.setString( index++, dto.getStart() );
			}
		
			if (dto.isEndModified()) {
				stmt.setString( index++, dto.getEnd() );
			}
		
			if (dto.isStartIntModified()) {
				stmt.setInt( index++, dto.getStartInt() );
			}
		
			if (dto.isEndIntModified()) {
				stmt.setInt( index++, dto.getEndInt() );
			}
		
			if (dto.isCountrySymbolModified()) {
				stmt.setString( index++, dto.getCountrySymbol() );
			}
		
			if (dto.isCountryModified()) {
				stmt.setString( index++, dto.getCountry() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GeoipDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the geoip table that match the criteria ''.
	 */
	public Geoip[] findAll() throws GeoipDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the geoip table that match the criteria 'start = :start'.
	 */
	public Geoip[] findWhereStartEquals(String start) throws GeoipDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE start = ? ORDER BY start", new Object[] { start } );
	}

	/** 
	 * Returns all rows from the geoip table that match the criteria 'end = :end'.
	 */
	public Geoip[] findWhereEndEquals(String end) throws GeoipDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE end = ? ORDER BY end", new Object[] { end } );
	}

	/** 
	 * Returns all rows from the geoip table that match the criteria 'start_int = :startInt'.
	 */
	public Geoip[] findWhereStartIntEquals(int startInt) throws GeoipDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE start_int = ? ORDER BY start_int", new Object[] {  new Integer(startInt) } );
	}

	/** 
	 * Returns all rows from the geoip table that match the criteria 'end_int = :endInt'.
	 */
	public Geoip[] findWhereEndIntEquals(int endInt) throws GeoipDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE end_int = ? ORDER BY end_int", new Object[] {  new Integer(endInt) } );
	}

	/** 
	 * Returns all rows from the geoip table that match the criteria 'country_symbol = :countrySymbol'.
	 */
	public Geoip[] findWhereCountrySymbolEquals(String countrySymbol) throws GeoipDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE country_symbol = ? ORDER BY country_symbol", new Object[] { countrySymbol } );
	}

	/** 
	 * Returns all rows from the geoip table that match the criteria 'country = :country'.
	 */
	public Geoip[] findWhereCountryEquals(String country) throws GeoipDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE country = ? ORDER BY country", new Object[] { country } );
	}

	/**
	 * Method 'GeoipDaoImpl'
	 * 
	 */
	public GeoipDaoImpl()
	{
	}

	/**
	 * Method 'GeoipDaoImpl'
	 * 
	 * @param userConn
	 */
	public GeoipDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "geoip";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Geoip fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Geoip dto = new Geoip();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Geoip[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Geoip dto = new Geoip();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Geoip ret[] = new Geoip[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Geoip dto, ResultSet rs) throws SQLException
	{
		dto.setStart( rs.getString( COLUMN_START ) );
		dto.setEnd( rs.getString( COLUMN_END ) );
		dto.setStartInt( rs.getInt( COLUMN_START_INT ) );
		dto.setEndInt( rs.getInt( COLUMN_END_INT ) );
		dto.setCountrySymbol( rs.getString( COLUMN_COUNTRY_SYMBOL ) );
		dto.setCountry( rs.getString( COLUMN_COUNTRY ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Geoip dto)
	{
		dto.setStartModified( false );
		dto.setEndModified( false );
		dto.setStartIntModified( false );
		dto.setEndIntModified( false );
		dto.setCountrySymbolModified( false );
		dto.setCountryModified( false );
	}

	/** 
	 * Returns all rows from the geoip table that match the specified arbitrary SQL statement
	 */
	public Geoip[] findByDynamicSelect(String sql, Object[] sqlParams) throws GeoipDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GeoipDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the geoip table that match the specified arbitrary SQL statement
	 */
	public Geoip[] findByDynamicWhere(String sql, Object[] sqlParams) throws GeoipDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GeoipDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
