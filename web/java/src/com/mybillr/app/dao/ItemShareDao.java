/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mybillr.app.dao;

import com.mybillr.app.dto.*;
import com.mybillr.app.exceptions.*;

public interface ItemShareDao
{
	/** 
	 * Inserts a new row in the item_share table.
	 */
	public ItemSharePk insert(ItemShare dto) throws ItemShareDaoException;

	/** 
	 * Updates a single row in the item_share table.
	 */
	public void update(ItemSharePk pk, ItemShare dto) throws ItemShareDaoException;

	/** 
	 * Deletes a single row in the item_share table.
	 */
	public void delete(ItemSharePk pk) throws ItemShareDaoException;

	/** 
	 * Returns the rows from the item_share table that matches the specified primary-key value.
	 */
	public ItemShare findByPrimaryKey(ItemSharePk pk) throws ItemShareDaoException;

	/** 
	 * Returns all rows from the item_share table that match the criteria 'id = :id'.
	 */
	public ItemShare findByPrimaryKey(int id) throws ItemShareDaoException;

	/** 
	 * Returns all rows from the item_share table that match the criteria ''.
	 */
	public ItemShare[] findAll() throws ItemShareDaoException;

	/** 
	 * Returns all rows from the item_share table that match the criteria 'item_id = :itemId'.
	 */
	public ItemShare[] findByItems(int itemId) throws ItemShareDaoException;

	/** 
	 * Returns all rows from the item_share table that match the criteria 'user_id = :userId'.
	 */
	public ItemShare[] findByUser(int userId) throws ItemShareDaoException;

	/** 
	 * Returns all rows from the item_share table that match the criteria 'id = :id'.
	 */
	public ItemShare[] findWhereIdEquals(int id) throws ItemShareDaoException;

	/** 
	 * Returns all rows from the item_share table that match the criteria 'item_id = :itemId'.
	 */
	public ItemShare[] findWhereItemIdEquals(int itemId) throws ItemShareDaoException;

	/** 
	 * Returns all rows from the item_share table that match the criteria 'user_id = :userId'.
	 */
	public ItemShare[] findWhereUserIdEquals(int userId) throws ItemShareDaoException;

	/** 
	 * Returns all rows from the item_share table that match the criteria 'share = :share'.
	 */
	public ItemShare[] findWhereShareEquals(int share) throws ItemShareDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the item_share table that match the specified arbitrary SQL statement
	 */
	public ItemShare[] findByDynamicSelect(String sql, Object[] sqlParams) throws ItemShareDaoException;

	/** 
	 * Returns all rows from the item_share table that match the specified arbitrary SQL statement
	 */
	public ItemShare[] findByDynamicWhere(String sql, Object[] sqlParams) throws ItemShareDaoException;

}
