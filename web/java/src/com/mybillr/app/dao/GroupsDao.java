/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mybillr.app.dao;

import com.mybillr.app.dto.*;
import com.mybillr.app.exceptions.*;

public interface GroupsDao
{
	/** 
	 * Inserts a new row in the groups table.
	 */
	public GroupsPk insert(Groups dto) throws GroupsDaoException;

	/** 
	 * Updates a single row in the groups table.
	 */
	public void update(GroupsPk pk, Groups dto) throws GroupsDaoException;

	/** 
	 * Deletes a single row in the groups table.
	 */
	public void delete(GroupsPk pk) throws GroupsDaoException;

	/** 
	 * Returns the rows from the groups table that matches the specified primary-key value.
	 */
	public Groups findByPrimaryKey(GroupsPk pk) throws GroupsDaoException;

	/** 
	 * Returns all rows from the groups table that match the criteria 'id = :id AND name = :name AND member_id = :memberId'.
	 */
	public Groups findByPrimaryKey(int id, String name, int memberId) throws GroupsDaoException;

	/** 
	 * Returns all rows from the groups table that match the criteria ''.
	 */
	public Groups[] findAll() throws GroupsDaoException;

	/** 
	 * Returns all rows from the groups table that match the criteria 'member_id = :memberId'.
	 */
	public Groups[] findByUser(int memberId) throws GroupsDaoException;

	/** 
	 * Returns all rows from the groups table that match the criteria 'id = :id'.
	 */
	public Groups[] findWhereIdEquals(int id) throws GroupsDaoException;

	/** 
	 * Returns all rows from the groups table that match the criteria 'name = :name'.
	 */
	public Groups[] findWhereNameEquals(String name) throws GroupsDaoException;

	/** 
	 * Returns all rows from the groups table that match the criteria 'member_id = :memberId'.
	 */
	public Groups[] findWhereMemberIdEquals(int memberId) throws GroupsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the groups table that match the specified arbitrary SQL statement
	 */
	public Groups[] findByDynamicSelect(String sql, Object[] sqlParams) throws GroupsDaoException;

	/** 
	 * Returns all rows from the groups table that match the specified arbitrary SQL statement
	 */
	public Groups[] findByDynamicWhere(String sql, Object[] sqlParams) throws GroupsDaoException;

}
