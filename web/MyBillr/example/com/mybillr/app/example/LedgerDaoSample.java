/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mybillr.app.example;

import java.math.*;
import java.util.Date;
import java.util.Collection;
import com.mybillr.app.dao.LedgerDao;
import com.mybillr.app.dto.Ledger;
import com.mybillr.app.exceptions.LedgerDaoException;
import com.mybillr.app.factory.LedgerDaoFactory;

public class LedgerDaoSample
{
	/**
	 * Method 'main'
	 * 
	 * @param arg
	 * @throws Exception
	 */
	public static void main(String[] arg) throws Exception
	{
		// Uncomment one of the lines below to test the generated code
		
		// findAll();
		// findByUser(0);
		// findByUser2(0);
		// findWhereIdEquals(0);
		// findWhereOwedByEquals(0);
		// findWhereOwesToEquals(0);
		// findWhereAmountEquals(0);
		// findWhereCurrencyEquals(0);
	}

	/**
	 * Method 'findAll'
	 * 
	 */
	public static void findAll()
	{
		try {
			LedgerDao _dao = getLedgerDao();
			Ledger _result[] = _dao.findAll();
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findByUser'
	 * 
	 * @param owesTo
	 */
	public static void findByUser(int owesTo)
	{
		try {
			LedgerDao _dao = getLedgerDao();
			Ledger _result[] = _dao.findByUser(owesTo);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findByUser2'
	 * 
	 * @param owedBy
	 */
	public static void findByUser2(int owedBy)
	{
		try {
			LedgerDao _dao = getLedgerDao();
			Ledger _result[] = _dao.findByUser2(owedBy);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereIdEquals'
	 * 
	 * @param id
	 */
	public static void findWhereIdEquals(int id)
	{
		try {
			LedgerDao _dao = getLedgerDao();
			Ledger _result[] = _dao.findWhereIdEquals(id);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereOwedByEquals'
	 * 
	 * @param owedBy
	 */
	public static void findWhereOwedByEquals(int owedBy)
	{
		try {
			LedgerDao _dao = getLedgerDao();
			Ledger _result[] = _dao.findWhereOwedByEquals(owedBy);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereOwesToEquals'
	 * 
	 * @param owesTo
	 */
	public static void findWhereOwesToEquals(int owesTo)
	{
		try {
			LedgerDao _dao = getLedgerDao();
			Ledger _result[] = _dao.findWhereOwesToEquals(owesTo);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereAmountEquals'
	 * 
	 * @param amount
	 */
	public static void findWhereAmountEquals(int amount)
	{
		try {
			LedgerDao _dao = getLedgerDao();
			Ledger _result[] = _dao.findWhereAmountEquals(amount);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereCurrencyEquals'
	 * 
	 * @param currency
	 */
	public static void findWhereCurrencyEquals(int currency)
	{
		try {
			LedgerDao _dao = getLedgerDao();
			Ledger _result[] = _dao.findWhereCurrencyEquals(currency);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'getLedgerDao'
	 * 
	 * @return LedgerDao
	 */
	public static LedgerDao getLedgerDao()
	{
		return LedgerDaoFactory.create();
	}

	/**
	 * Method 'display'
	 * 
	 * @param dto
	 */
	public static void display(Ledger dto)
	{
		StringBuffer buf = new StringBuffer();
		buf.append( dto.getId() );
		buf.append( ", " );
		buf.append( dto.getOwedBy() );
		buf.append( ", " );
		buf.append( dto.getOwesTo() );
		buf.append( ", " );
		buf.append( dto.getAmount() );
		buf.append( ", " );
		buf.append( dto.getCurrency() );
		System.out.println( buf.toString() );
	}

}
