/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mybillr.app.example;

import java.math.*;
import java.util.Date;
import java.util.Collection;
import com.mybillr.app.dao.GeoipDao;
import com.mybillr.app.dto.Geoip;
import com.mybillr.app.exceptions.GeoipDaoException;
import com.mybillr.app.factory.GeoipDaoFactory;

public class GeoipDaoSample
{
	/**
	 * Method 'main'
	 * 
	 * @param arg
	 * @throws Exception
	 */
	public static void main(String[] arg) throws Exception
	{
		// Uncomment one of the lines below to test the generated code
		
		// findAll();
		// findWhereStartEquals("");
		// findWhereEndEquals("");
		// findWhereStartIntEquals(0);
		// findWhereEndIntEquals(0);
		// findWhereCountrySymbolEquals("");
		// findWhereCountryEquals("");
	}

	/**
	 * Method 'findAll'
	 * 
	 */
	public static void findAll()
	{
		try {
			GeoipDao _dao = getGeoipDao();
			Geoip _result[] = _dao.findAll();
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereStartEquals'
	 * 
	 * @param start
	 */
	public static void findWhereStartEquals(String start)
	{
		try {
			GeoipDao _dao = getGeoipDao();
			Geoip _result[] = _dao.findWhereStartEquals(start);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereEndEquals'
	 * 
	 * @param end
	 */
	public static void findWhereEndEquals(String end)
	{
		try {
			GeoipDao _dao = getGeoipDao();
			Geoip _result[] = _dao.findWhereEndEquals(end);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereStartIntEquals'
	 * 
	 * @param startInt
	 */
	public static void findWhereStartIntEquals(int startInt)
	{
		try {
			GeoipDao _dao = getGeoipDao();
			Geoip _result[] = _dao.findWhereStartIntEquals(startInt);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereEndIntEquals'
	 * 
	 * @param endInt
	 */
	public static void findWhereEndIntEquals(int endInt)
	{
		try {
			GeoipDao _dao = getGeoipDao();
			Geoip _result[] = _dao.findWhereEndIntEquals(endInt);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereCountrySymbolEquals'
	 * 
	 * @param countrySymbol
	 */
	public static void findWhereCountrySymbolEquals(String countrySymbol)
	{
		try {
			GeoipDao _dao = getGeoipDao();
			Geoip _result[] = _dao.findWhereCountrySymbolEquals(countrySymbol);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereCountryEquals'
	 * 
	 * @param country
	 */
	public static void findWhereCountryEquals(String country)
	{
		try {
			GeoipDao _dao = getGeoipDao();
			Geoip _result[] = _dao.findWhereCountryEquals(country);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'getGeoipDao'
	 * 
	 * @return GeoipDao
	 */
	public static GeoipDao getGeoipDao()
	{
		return GeoipDaoFactory.create();
	}

	/**
	 * Method 'display'
	 * 
	 * @param dto
	 */
	public static void display(Geoip dto)
	{
		StringBuffer buf = new StringBuffer();
		buf.append( dto.getStart() );
		buf.append( ", " );
		buf.append( dto.getEnd() );
		buf.append( ", " );
		buf.append( dto.getStartInt() );
		buf.append( ", " );
		buf.append( dto.getEndInt() );
		buf.append( ", " );
		buf.append( dto.getCountrySymbol() );
		buf.append( ", " );
		buf.append( dto.getCountry() );
		System.out.println( buf.toString() );
	}

}
