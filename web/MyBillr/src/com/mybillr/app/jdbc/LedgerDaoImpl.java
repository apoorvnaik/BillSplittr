/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mybillr.app.jdbc;

import com.mybillr.app.dao.*;
import com.mybillr.app.factory.*;
import com.mybillr.app.dto.*;
import com.mybillr.app.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class LedgerDaoImpl extends AbstractDAO implements LedgerDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id, owed_by, owes_to, amount, currency FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id, owed_by, owes_to, amount, currency ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id = ?, owed_by = ?, owes_to = ?, amount = ?, currency = ? WHERE id = ? AND currency = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ? AND currency = ?";

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column owed_by
	 */
	protected static final int COLUMN_OWED_BY = 2;

	/** 
	 * Index of column owes_to
	 */
	protected static final int COLUMN_OWES_TO = 3;

	/** 
	 * Index of column amount
	 */
	protected static final int COLUMN_AMOUNT = 4;

	/** 
	 * Index of column currency
	 */
	protected static final int COLUMN_CURRENCY = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Index of primary-key column currency
	 */
	protected static final int PK_COLUMN_CURRENCY = 2;

	/** 
	 * Inserts a new row in the ledger table.
	 */
	public LedgerPk insert(Ledger dto) throws LedgerDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isOwedByModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "owed_by" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isOwesToModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "owes_to" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAmountModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "amount" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCurrencyModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "currency" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isOwedByModified()) {
				stmt.setInt( index++, dto.getOwedBy() );
			}
		
			if (dto.isOwesToModified()) {
				stmt.setInt( index++, dto.getOwesTo() );
			}
		
			if (dto.isAmountModified()) {
				stmt.setInt( index++, dto.getAmount() );
			}
		
			if (dto.isCurrencyModified()) {
				stmt.setInt( index++, dto.getCurrency() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LedgerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ledger table.
	 */
	public void update(LedgerPk pk, Ledger dto) throws LedgerDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id=?" );
				modified=true;
			}
		
			if (dto.isOwedByModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "owed_by=?" );
				modified=true;
			}
		
			if (dto.isOwesToModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "owes_to=?" );
				modified=true;
			}
		
			if (dto.isAmountModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "amount=?" );
				modified=true;
			}
		
			if (dto.isCurrencyModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "currency=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id=? AND currency=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isOwedByModified()) {
				stmt.setInt( index++, dto.getOwedBy() );
			}
		
			if (dto.isOwesToModified()) {
				stmt.setInt( index++, dto.getOwesTo() );
			}
		
			if (dto.isAmountModified()) {
				stmt.setInt( index++, dto.getAmount() );
			}
		
			if (dto.isCurrencyModified()) {
				stmt.setInt( index++, dto.getCurrency() );
			}
		
			stmt.setInt( index++, pk.getId() );
			stmt.setInt( index++, pk.getCurrency() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LedgerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ledger table.
	 */
	public void delete(LedgerPk pk) throws LedgerDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			stmt.setInt( 2, pk.getCurrency() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LedgerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ledger table that matches the specified primary-key value.
	 */
	public Ledger findByPrimaryKey(LedgerPk pk) throws LedgerDaoException
	{
		return findByPrimaryKey( pk.getId(), pk.getCurrency() );
	}

	/** 
	 * Returns all rows from the ledger table that match the criteria 'id = :id AND currency = :currency'.
	 */
	public Ledger findByPrimaryKey(int id, int currency) throws LedgerDaoException
	{
		Ledger ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ? AND currency = ?", new Object[] {  new Integer(id),  new Integer(currency) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ledger table that match the criteria ''.
	 */
	public Ledger[] findAll() throws LedgerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id", null );
	}

	/** 
	 * Returns all rows from the ledger table that match the criteria 'owes_to = :owesTo'.
	 */
	public Ledger[] findByUser(int owesTo) throws LedgerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE owes_to = ?", new Object[] {  new Integer(owesTo) } );
	}

	/** 
	 * Returns all rows from the ledger table that match the criteria 'owed_by = :owedBy'.
	 */
	public Ledger[] findByUser2(int owedBy) throws LedgerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE owed_by = ?", new Object[] {  new Integer(owedBy) } );
	}

	/** 
	 * Returns all rows from the ledger table that match the criteria 'id = :id'.
	 */
	public Ledger[] findWhereIdEquals(int id) throws LedgerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id = ? ORDER BY id", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the ledger table that match the criteria 'owed_by = :owedBy'.
	 */
	public Ledger[] findWhereOwedByEquals(int owedBy) throws LedgerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE owed_by = ? ORDER BY owed_by", new Object[] {  new Integer(owedBy) } );
	}

	/** 
	 * Returns all rows from the ledger table that match the criteria 'owes_to = :owesTo'.
	 */
	public Ledger[] findWhereOwesToEquals(int owesTo) throws LedgerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE owes_to = ? ORDER BY owes_to", new Object[] {  new Integer(owesTo) } );
	}

	/** 
	 * Returns all rows from the ledger table that match the criteria 'amount = :amount'.
	 */
	public Ledger[] findWhereAmountEquals(int amount) throws LedgerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE amount = ? ORDER BY amount", new Object[] {  new Integer(amount) } );
	}

	/** 
	 * Returns all rows from the ledger table that match the criteria 'currency = :currency'.
	 */
	public Ledger[] findWhereCurrencyEquals(int currency) throws LedgerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE currency = ? ORDER BY currency", new Object[] {  new Integer(currency) } );
	}

	/**
	 * Method 'LedgerDaoImpl'
	 * 
	 */
	public LedgerDaoImpl()
	{
	}

	/**
	 * Method 'LedgerDaoImpl'
	 * 
	 * @param userConn
	 */
	public LedgerDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "ledger";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Ledger fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Ledger dto = new Ledger();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Ledger[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Ledger dto = new Ledger();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Ledger ret[] = new Ledger[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Ledger dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setOwedBy( rs.getInt( COLUMN_OWED_BY ) );
		dto.setOwesTo( rs.getInt( COLUMN_OWES_TO ) );
		dto.setAmount( rs.getInt( COLUMN_AMOUNT ) );
		dto.setCurrency( rs.getInt( COLUMN_CURRENCY ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Ledger dto)
	{
		dto.setIdModified( false );
		dto.setOwedByModified( false );
		dto.setOwesToModified( false );
		dto.setAmountModified( false );
		dto.setCurrencyModified( false );
	}

	/** 
	 * Returns all rows from the ledger table that match the specified arbitrary SQL statement
	 */
	public Ledger[] findByDynamicSelect(String sql, Object[] sqlParams) throws LedgerDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LedgerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ledger table that match the specified arbitrary SQL statement
	 */
	public Ledger[] findByDynamicWhere(String sql, Object[] sqlParams) throws LedgerDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LedgerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
